import { Flex } from '@chakra-ui/react'
import { Karla, Silkscreen } from '@next/font/google'
import { GetStaticProps, InferGetStaticPropsType } from 'next'
import Head from 'next/head'
import { useRouter } from 'next/router'
import { useEffect, useState } from 'react'
import PostCard from '../components/PostCard'
import { Post } from '../types'
import { getPosts, getPostsFilterDomain } from '../utils/firebase'

const font = Silkscreen({ subsets: ['latin'], weight: '400' })
const bodyFont = Karla({ subsets: ['latin'], weight: '400' })

const Home = ({
  preloadedPosts
}: InferGetStaticPropsType<typeof getStaticProps>) => {
  const router = useRouter()
  const [posts, setPosts] = useState<Post[]>([])

  useEffect(() => {
    const fetchPosts = async () => {
      if (router.query.domain) {
        const res = await getPostsFilterDomain(router.query.domain as string)
        setPosts(res)
      } else {
        const res = await getPosts()
        setPosts(res)
      }
    }
    fetchPosts()
  }, [router.query.domain])

  const showPosts = posts.length ? posts : preloadedPosts

  return (
    <>
      <Head>
        <title>nozee</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Flex direction="column" pl="224px" gap="6" my="56px">
        {router.query.domain && (
          <Flex
            alignItems="flex-start"
            backgroundColor="#1E1E38"
            borderRadius="10"
            gap="4"
            padding="8"
            minW="800px"
            className={bodyFont.className}
            _hover={{
              cursor: 'pointer',
              backgroundColor: '#262645',
              boxShadow:
                '0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1)'
            }}
          >
            Showing:
            <span className={font.className}>{router.query.domain}</span>
          </Flex>
        )}
        {showPosts.map(p => (
          <PostCard
            key={p.id}
            id={p.id}
            message={p.message}
            signature={p.signature}
            company={p.company}
            truncate
          />
        ))}
      </Flex>
    </>
  )
}

export const getStaticProps: GetStaticProps<{
  preloadedPosts: Post[]
}> = async context => {
  const res = await getPosts()
  return { props: { preloadedPosts: res } }
}

export default Home
