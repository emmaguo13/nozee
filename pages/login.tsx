import { CheckCircleIcon, WarningIcon } from '@chakra-ui/icons'
import {
  Accordion,
  AccordionButton,
  AccordionIcon,
  AccordionItem,
  AccordionPanel,
  Box,
  Button,
  Flex,
  Progress,
  Text
} from '@chakra-ui/react'
import { Karla, Silkscreen } from '@next/font/google'
import localforage from 'localforage'
import Head from 'next/head'
import { useRouter } from 'next/router'
import { useState } from 'react'
import Confetti from 'react-confetti'
import { useWindowSize } from 'usehooks-ts'
import { Status, useApp } from '../contexts/AppProvider'
import { generate_inputs } from '../helpers/generate_input'

const font = Silkscreen({ subsets: ['latin'], weight: '400' })
const bodyFont = Karla({ subsets: ['latin'], weight: '400' })

enum Steps {
  DOWNLOADING,
  DOWNLOADED,
  GENERATING,
  VERIFYING,
  AUTHENTICATED
}

const LoadingText = [
  'Downloading .zkey',
  'Ready to login!',
  'Generating Proofs',
  'Confirm in wallet to verify proof on chain',
  'Authenticated'
]

export default function Home() {
  const { downloadProgress, downloadStatus, zkey } = useApp()
  const router = useRouter()
  const [domain, setDomain] = useState()
  const [status, setStatus] = useState<Steps>(
    Status.DOWNLOADED ? Steps.DOWNLOADED : Steps.DOWNLOADING
  )
  const { height, width } = useWindowSize()

  const token = router.query.msg?.toString() ?? ''

  const handleLogin = async () => {
    setStatus(Steps.GENERATING)
    const storedProof = JSON.parse((await localforage.getItem('proof')) || '{}')
    const storedPublicSignals = await localforage.getItem('publicSignals')
    // TODO: in what scenario do we want to store both proof and publicSignals?
    if (storedProof && storedPublicSignals) {
      console.log('proof found in localstorage, skipping proof generation')
      const res = await fetch('/api/verify', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          proof: storedProof,
          publicSignals: storedPublicSignals
        })
      })
      const { domain, isVerified } = await res.json()
      if (isVerified) {
        setDomain(domain)
        setStatus(Steps.AUTHENTICATED)
        return
      }
    } else {
      console.log('proof not found in localstorage, generating proof')
      // Generate Proof
      const worker = new Worker('./worker.js')
      const splitToken = token.split('.')
      const inputs = await generate_inputs(
        splitToken[2],
        splitToken[0] + '.' + splitToken[1],
        '0x0000000000000000000000000000000000000000',
        // TODO: change this
        'headspace'
      )

      console.log("INPUTS TEST!!!", inputs);
      
      worker.postMessage(['fullProve', inputs, zkey])
      worker.onmessage = async function (e) {
        const { proof, publicSignals } = e.data
        console.log('PROOF SUCCESSFULLY GENERATED: ', proof, publicSignals)
        const serializedProof = JSON.stringify(proof)
        await localforage.setItem('proof', serializedProof)
        await localforage.setItem('publicSignals', publicSignals)
        setStatus(Steps.VERIFYING)
        const res = await fetch('/api/verify', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            proof,
            publicSignals
          })
        })
        const { domain, isVerified } = await res.json()
        if (isVerified) {
          setDomain(domain)
          setStatus(Steps.AUTHENTICATED)
          return
        }
      }
    }
  }

  return (
    <>
      <Head>
        <title>login to nozee</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div
        style={{
          position: 'absolute',
          top: '-56px',
          left: 0,
          bottom: 0,
          right: 0
        }}
      >
        {status === Steps.AUTHENTICATED && (
          <Confetti width={width} height={height} />
        )}
      </div>
      <Flex
        as="main"
        direction="column"
        w="100%"
        position="relative"
        minH="100vh"
        className={bodyFont.className}
        gap="6"
      >
        <Box h="56px" />
        <Text className={font.className} fontSize="50" textAlign="center">
          Sign in
        </Text>
        <Flex flex={1} placeContent="center">
          <Flex direction="column" gap="4">
            <Accordion w="400px" allowToggle>
              <AccordionItem
                _hover={{
                  cursor: 'pointer',
                  backgroundColor: '#0A0A12'
                }}
              >
                <h2>
                  <AccordionButton>
                    <Flex alignItems="center" gap="4" flex="1">
                      {token ? (
                        <>
                          <CheckCircleIcon color="green.200" />
                          JWT Loaded
                        </>
                      ) : (
                        <>
                          <WarningIcon />
                          No JWT Loaded
                        </>
                      )}
                    </Flex>
                    <AccordionIcon />
                  </AccordionButton>
                </h2>
                <AccordionPanel pb={4}>
                  Download the extension from
                  <Button
                    onClick={() =>
                      window.location.assign(
                        'https://zkjwt-zkey-chunks.s3.amazonaws.com/extension.zip'
                      )
                    }
                    variant="link"
                  >
                    here.
                  </Button>
                  Unzip the file. Then, go to Manage Extensions in Chrome &
                  switch on Develop Mode in upper-right corner. Press load
                  unpacked & select JWT Extension file from downloads.
                </AccordionPanel>
              </AccordionItem>
              <AccordionItem
                _hover={{
                  cursor: 'pointer',
                  backgroundColor: '#0A0A12'
                }}
              >
                <h2>
                  <AccordionButton>
                    <Flex alignItems="center" gap="4" flex="1">
                      {downloadStatus === Status.DOWNLOADED ? (
                        <>
                          <CheckCircleIcon color="green.200" />
                          .zkey Downloaded
                        </>
                      ) : (
                        <>
                          <WarningIcon />
                          Downloading .zkey
                        </>
                      )}
                    </Flex>
                    <AccordionIcon />
                  </AccordionButton>
                </h2>
                <AccordionPanel pb={4}>
                  Wait for zkeys to be downloaded and generate your
                  authentication proof â€” all client-side! We do not take or
                  store any data.
                </AccordionPanel>
              </AccordionItem>
            </Accordion>
            {status === Steps.AUTHENTICATED ? (
              <Button
                backgroundColor="#992870"
                className={font.className}
                onClick={() => router.push('/')}
              >
                {/* Fetch domain from circuit regex */}
                ENTER NOZEE @{domain}
              </Button>
            ) : (
              <Button
                backgroundColor="#4C82FB"
                isLoading={status > Steps.DOWNLOADED}
                onClick={handleLogin}
                loadingText={LoadingText[status]}
                isDisabled={!token}
              >
                Login
              </Button>
            )}
          </Flex>
        </Flex>
        <Box bottom="0" position="absolute" w="100%">
          <Text ml="1">{LoadingText[status]}</Text>
          <Progress
            value={
              downloadProgress || (status === Steps.AUTHENTICATED ? 100 : 0)
            }
            backgroundColor={
              status === Steps.AUTHENTICATED ? '#992870' : '#4C82FB'
            }
            isIndeterminate={
              status > Steps.DOWNLOADED &&
              status !== Steps.AUTHENTICATED &&
              downloadStatus !== Status.DOWNLOADING
            }
          />
        </Box>
      </Flex>
    </>
  )
}
