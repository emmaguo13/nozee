// Generated by @wagmi/cli@0.1.11 on 2/28/2023 at 5:27:05 PM
import {
  useContract,
  UseContractConfig,
  useContractRead,
  UseContractReadConfig,
  useContractWrite,
  UseContractWriteConfig,
  usePrepareContractWrite,
  UsePrepareContractWriteConfig
} from 'wagmi'
import {
  ReadContractResult,
  WriteContractMode,
  PrepareWriteContractResult
} from 'wagmi/actions'

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Blind
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const blindABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [{ name: '_verifier', internalType: 'address', type: 'address' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'a', internalType: 'uint256[2]', type: 'uint256[2]' },
      { name: 'b', internalType: 'uint256[2][2]', type: 'uint256[2][2]' },
      { name: 'c', internalType: 'uint256[2]', type: 'uint256[2]' },
      { name: 'input', internalType: 'uint256[48]', type: 'uint256[48]' }
    ],
    name: 'add',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'companies',
    outputs: [{ name: '', internalType: 'string', type: 'string' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'get',
    outputs: [{ name: '', internalType: 'string', type: 'string' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'verifier',
    outputs: [{ name: '', internalType: 'contract Verifier', type: 'address' }]
  }
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link blindABI}__.
 */
export function useBlind(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: blindABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link blindABI}__.
 */
export function useBlindRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof blindABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof blindABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({ abi: blindABI, ...config } as UseContractReadConfig<
    typeof blindABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link blindABI}__ and `functionName` set to `"companies"`.
 */
export function useBlindCompanies<
  TSelectData = ReadContractResult<typeof blindABI, 'companies'>
>(
  config: Omit<
    UseContractReadConfig<typeof blindABI, 'companies', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: blindABI,
    functionName: 'companies',
    ...config
  } as UseContractReadConfig<typeof blindABI, 'companies', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link blindABI}__ and `functionName` set to `"get"`.
 */
export function useBlindGet<
  TSelectData = ReadContractResult<typeof blindABI, 'get'>
>(
  config: Omit<
    UseContractReadConfig<typeof blindABI, 'get', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: blindABI,
    functionName: 'get',
    ...config
  } as UseContractReadConfig<typeof blindABI, 'get', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link blindABI}__ and `functionName` set to `"verifier"`.
 */
export function useBlindVerifier<
  TSelectData = ReadContractResult<typeof blindABI, 'verifier'>
>(
  config: Omit<
    UseContractReadConfig<typeof blindABI, 'verifier', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: blindABI,
    functionName: 'verifier',
    ...config
  } as UseContractReadConfig<typeof blindABI, 'verifier', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link blindABI}__.
 */
export function useBlindWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof blindABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof blindABI, TFunctionName> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<TMode, typeof blindABI, TFunctionName>({
    abi: blindABI,
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link blindABI}__ and `functionName` set to `"add"`.
 */
export function useBlindAdd<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof blindABI, 'add'>['abi'],
        'add'
      > & { functionName?: 'add' }
    : UseContractWriteConfig<TMode, typeof blindABI, 'add'> & {
        abi?: never
        functionName?: 'add'
      } = {} as any
) {
  return useContractWrite<TMode, typeof blindABI, 'add'>({
    abi: blindABI,
    functionName: 'add',
    ...config
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link blindABI}__.
 */
export function usePrepareBlindWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof blindABI, TFunctionName>,
    'abi'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: blindABI,
    ...config
  } as UsePrepareContractWriteConfig<typeof blindABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link blindABI}__ and `functionName` set to `"add"`.
 */
export function usePrepareBlindAdd(
  config: Omit<
    UsePrepareContractWriteConfig<typeof blindABI, 'add'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: blindABI,
    functionName: 'add',
    ...config
  } as UsePrepareContractWriteConfig<typeof blindABI, 'add'>)
}
